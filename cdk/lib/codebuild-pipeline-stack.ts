import * as cdk from 'aws-cdk-lib';
import * as codebuild from 'aws-cdk-lib/aws-codebuild';
import * as codecommit from 'aws-cdk-lib/aws-codecommit';
import * as codepipeline from 'aws-cdk-lib/aws-codepipeline';
import * as codepipeline_actions from 'aws-cdk-lib/aws-codepipeline-actions';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as sns from 'aws-cdk-lib/aws-sns';
import * as subscriptions from 'aws-cdk-lib/aws-sns-subscriptions';
import * as events from 'aws-cdk-lib/aws-events';
import * as targets from 'aws-cdk-lib/aws-events-targets';
import { Construct } from 'constructs';

export interface CodeBuildPipelineStackProps extends cdk.StackProps {
    /**
     * GitHub repository owner/organization
     */
    githubOwner: string;

    /**
     * GitHub repository name
     */
    githubRepo: string;

    /**
     * GitHub branch to monitor (default: main)
     */
    githubBranch?: string;

    /**
     * Email for notifications (optional)
     */
    notificationEmail?: string;

    /**
     * Environment name (dev, staging, production)
     */
    environment?: string;
}

export class CodeBuildPipelineStack extends cdk.Stack {
    public readonly buildProject: codebuild.Project;
    public readonly pipeline: codepipeline.Pipeline;
    public readonly artifactsBucket: s3.Bucket;

    constructor(scope: Construct, id: string, props: CodeBuildPipelineStackProps) {
        super(scope, id, props);

        const environment = props.environment || 'production';
        const githubBranch = props.githubBranch || 'main';
        const stackName = `simple-task-tracker-pipeline-${environment}`;

        // Create shorter names for S3 buckets (max 63 chars)
        const envShort = environment.substring(0, 3); // pro, sta, dev
        const regionShort = this.region.replace('us-', '').replace('-', ''); // uswest2
        const accountShort = this.account.substring(0, 6); // First 6 digits

        // S3 bucket for artifacts (let CDK generate unique name)
        this.artifactsBucket = new s3.Bucket(this, 'ArtifactsBucket', {
            // bucketName: auto-generated by CDK for uniqueness
            encryption: s3.BucketEncryption.S3_MANAGED,
            versioned: true,
            lifecycleRules: [
                {
                    id: 'DeleteOldArtifacts',
                    expiration: cdk.Duration.days(30),
                    noncurrentVersionExpiration: cdk.Duration.days(7),
                },
            ],
            removalPolicy: environment === 'production'
                ? cdk.RemovalPolicy.RETAIN
                : cdk.RemovalPolicy.DESTROY,
            autoDeleteObjects: environment !== 'production',
        });

        // IAM role for CodeBuild
        const codeBuildRole = new iam.Role(this, 'CodeBuildRole', {
            assumedBy: new iam.ServicePrincipal('codebuild.amazonaws.com'),
            description: 'IAM role for Simple Task Tracker CodeBuild project',
            managedPolicies: [
                iam.ManagedPolicy.fromAwsManagedPolicyName('AWSCodeBuildDeveloperAccess'),
            ],
            inlinePolicies: {
                SimpleTaskTrackerPolicy: new iam.PolicyDocument({
                    statements: [
                        // CloudFormation permissions for CDK
                        new iam.PolicyStatement({
                            effect: iam.Effect.ALLOW,
                            actions: [
                                'cloudformation:*',
                                'sts:AssumeRole',
                            ],
                            resources: ['*'],
                        }),
                        // S3 permissions for website and CDK assets
                        new iam.PolicyStatement({
                            effect: iam.Effect.ALLOW,
                            actions: [
                                's3:*',
                            ],
                            resources: ['*'],
                        }),
                        // CloudFront permissions
                        new iam.PolicyStatement({
                            effect: iam.Effect.ALLOW,
                            actions: [
                                'cloudfront:*',
                            ],
                            resources: ['*'],
                        }),
                        // IAM permissions for CDK
                        new iam.PolicyStatement({
                            effect: iam.Effect.ALLOW,
                            actions: [
                                'iam:*',
                            ],
                            resources: ['*'],
                        }),
                        // Lambda permissions for CDK custom resources
                        new iam.PolicyStatement({
                            effect: iam.Effect.ALLOW,
                            actions: [
                                'lambda:*',
                            ],
                            resources: ['*'],
                        }),
                        // Route53 and ACM permissions for custom domains
                        new iam.PolicyStatement({
                            effect: iam.Effect.ALLOW,
                            actions: [
                                'route53:*',
                                'acm:*',
                            ],
                            resources: ['*'],
                        }),
                        // CloudWatch permissions for monitoring
                        new iam.PolicyStatement({
                            effect: iam.Effect.ALLOW,
                            actions: [
                                'cloudwatch:*',
                                'logs:*',
                            ],
                            resources: ['*'],
                        }),
                        // Systems Manager for parameter store
                        new iam.PolicyStatement({
                            effect: iam.Effect.ALLOW,
                            actions: [
                                'ssm:GetParameter',
                                'ssm:GetParameters',
                                'ssm:GetParametersByPath',
                            ],
                            resources: [
                                `arn:aws:ssm:${this.region}:${this.account}:parameter/simple-task-tracker/*`,
                            ],
                        }),
                    ],
                }),
            },
        });

        // CodeBuild project
        this.buildProject = new codebuild.Project(this, 'BuildProject', {
            projectName: `stt-${envShort}-build`,
            description: 'Build project for Simple Task Tracker',
            role: codeBuildRole,

            // Build environment
            environment: {
                buildImage: codebuild.LinuxBuildImage.STANDARD_7_0,
                computeType: codebuild.ComputeType.SMALL,
                privileged: false,
            },

            // Source configuration for GitHub (webhook disabled for now)
            source: codebuild.Source.gitHub({
                owner: props.githubOwner,
                repo: props.githubRepo,
                webhook: false, // Disabled until GitHub access is approved
            }),

            // Build specification (inline to avoid dependency on repository file)
            buildSpec: codebuild.BuildSpec.fromObject({
                version: '0.2',
                env: {
                    variables: {
                        NODE_VERSION: '20',
                        AWS_DEFAULT_REGION: 'us-west-2',
                    },
                },
                phases: {
                    install: {
                        'runtime-versions': {
                            nodejs: 20,
                        },
                        commands: [
                            'echo "üöÄ Starting Simple Task Tracker build..."',
                            'npm install -g aws-cdk@latest',
                            'if [ -f package-lock.json ]; then npm ci; else npm install; fi',
                            'cd cdk && if [ -f package-lock.json ]; then npm ci; else npm install; fi && cd ..',
                            'npx playwright install --with-deps',
                        ],
                    },
                    pre_build: {
                        commands: [
                            'echo "üîç Running tests..."',
                            'node -c task-tracker-script.js',
                            'cd cdk && npm run build && npm test && cd ..',
                            'if [ -d "playwright-tests" ]; then npm run test:unit || echo "Unit tests failed but continuing..."; else echo "No test files found, skipping unit tests"; fi',
                            'if [ -d "playwright-tests" ]; then npm run test:ui || echo "UI tests failed but continuing..."; else echo "No test files found, skipping UI tests"; fi',
                        ],
                    },
                    build: {
                        commands: [
                            'echo "üöÄ Deploying to AWS..."',
                            'cd cdk',
                            'cdk bootstrap --require-approval never || echo "Bootstrap already exists"',
                            'cdk deploy --require-approval never -c environment=production',
                            'cd ..',
                        ],
                    },
                    post_build: {
                        commands: [
                            'echo "‚úÖ Build completed!"',
                        ],
                    },
                },
            }),

            // Artifacts
            artifacts: codebuild.Artifacts.s3({
                bucket: this.artifactsBucket,
                includeBuildId: true,
                packageZip: true,
            }),

            // Cache for faster builds
            cache: codebuild.Cache.local(
                codebuild.LocalCacheMode.DOCKER_LAYER,
                codebuild.LocalCacheMode.CUSTOM
            ),

            // Timeout
            timeout: cdk.Duration.minutes(60),

            // Environment variables
            environmentVariables: {
                ENVIRONMENT: {
                    value: environment,
                },
                AWS_DEFAULT_REGION: {
                    value: this.region,
                },
                AWS_ACCOUNT_ID: {
                    value: this.account,
                },
            },
        });

        // SNS topic for notifications
        const notificationTopic = new sns.Topic(this, 'NotificationTopic', {
            topicName: `stt-${envShort}-notifications`,
            displayName: 'Simple Task Tracker Build Notifications',
        });

        // Email subscription if provided
        if (props.notificationEmail) {
            notificationTopic.addSubscription(
                new subscriptions.EmailSubscription(props.notificationEmail)
            );
        }

        // EventBridge rules for build notifications
        const buildStateChangeRule = new events.Rule(this, 'BuildStateChangeRule', {
            ruleName: `stt-${envShort}-build-state-change`,
            description: 'Trigger notifications on build state changes',
            eventPattern: {
                source: ['aws.codebuild'],
                detailType: ['CodeBuild Build State Change'],
                detail: {
                    'project-name': [this.buildProject.projectName],
                    'build-status': ['SUCCEEDED', 'FAILED', 'STOPPED'],
                },
            },
        });

        buildStateChangeRule.addTarget(new targets.SnsTopic(notificationTopic, {
            message: events.RuleTargetInput.fromText(
                `Build ${events.EventField.fromPath('$.detail.build-status')} for Simple Task Tracker
                
Project: ${events.EventField.fromPath('$.detail.project-name')}
Build ID: ${events.EventField.fromPath('$.detail.build-id')}
Source Version: ${events.EventField.fromPath('$.detail.additional-information.source-version')}
Build Status: ${events.EventField.fromPath('$.detail.build-status')}
Region: ${events.EventField.fromPath('$.region')}
Time: ${events.EventField.fromPath('$.time')}

View build details: https://console.aws.amazon.com/codesuite/codebuild/projects/${this.buildProject.projectName}/build/${events.EventField.fromPath('$.detail.build-id')}`
            ),
        }));

        // Create a minimal pipeline for now (will be updated once GitHub access is approved)
        const sourceOutput = new codepipeline.Artifact('SourceOutput');

        this.pipeline = new codepipeline.Pipeline(this, 'Pipeline', {
            pipelineName: `stt-${envShort}-pipeline`,
            artifactBucket: this.artifactsBucket,
            stages: [
                {
                    stageName: 'Source',
                    actions: [
                        new codepipeline_actions.S3SourceAction({
                            actionName: 'S3_Source',
                            bucket: this.artifactsBucket,
                            bucketKey: 'placeholder-source.zip',
                            output: sourceOutput,
                        }),
                    ],
                },
                {
                    stageName: 'Approval',
                    actions: [
                        new codepipeline_actions.ManualApprovalAction({
                            actionName: 'ManualApproval',
                            additionalInformation: 'Pipeline will be updated once GitHub access is approved',
                        }),
                    ],
                },
            ],
        });

        // Outputs
        new cdk.CfnOutput(this, 'BuildProjectName', {
            value: this.buildProject.projectName,
            description: 'CodeBuild project name',
            exportName: `stt-${envShort}-BuildProjectName`,
        });

        new cdk.CfnOutput(this, 'PipelineName', {
            value: this.pipeline.pipelineName,
            description: 'CodePipeline name',
            exportName: `stt-${envShort}-PipelineName`,
        });

        new cdk.CfnOutput(this, 'ArtifactsBucketName', {
            value: this.artifactsBucket.bucketName,
            description: 'S3 bucket for build artifacts',
            exportName: `stt-${envShort}-ArtifactsBucketName`,
        });

        new cdk.CfnOutput(this, 'NotificationTopicArn', {
            value: notificationTopic.topicArn,
            description: 'SNS topic for build notifications',
            exportName: `stt-${envShort}-NotificationTopicArn`,
        });

        new cdk.CfnOutput(this, 'BuildProjectConsoleUrl', {
            value: `https://console.aws.amazon.com/codesuite/codebuild/projects/${this.buildProject.projectName}`,
            description: 'AWS Console URL for CodeBuild project',
        });

        new cdk.CfnOutput(this, 'PipelineConsoleUrl', {
            value: `https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${this.pipeline.pipelineName}/view`,
            description: 'AWS Console URL for CodePipeline',
        });
    }
}